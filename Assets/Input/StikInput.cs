//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Input/StikInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @StikInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @StikInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""StikInput"",
    ""maps"": [
        {
            ""name"": ""PlayerStik"",
            ""id"": ""a3bb634f-34ca-4f21-9f23-2d2bc2d52a7a"",
            ""actions"": [
                {
                    ""name"": ""Accelerate"",
                    ""type"": ""Value"",
                    ""id"": ""d2da52d7-550e-4b6a-bf91-589088ea7936"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""fa5824da-63b2-409c-a1ca-5091d4c9a460"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Brake"",
                    ""type"": ""Value"",
                    ""id"": ""0e2bf2e6-4137-442d-bf8e-21b82054a39e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""StartRace"",
                    ""type"": ""Button"",
                    ""id"": ""f65f4f1d-7ead-4053-a454-d5362aa26765"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Reverse"",
                    ""type"": ""Button"",
                    ""id"": ""0d17b682-9a89-4d92-8c2d-b110364ab6ed"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Reload"",
                    ""type"": ""Button"",
                    ""id"": ""006aa21b-60f1-4b04-8510-5a89ee742f20"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Tes"",
                    ""type"": ""Button"",
                    ""id"": ""49ea2246-2339-4247-afdf-7fe5899ab44d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a951bc54-4a57-45c9-9f49-45b95402ad20"",
                    ""path"": ""<DualShockGamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Accelerate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1d36a3c8-cfa7-4461-a475-7d7a907ad09e"",
                    ""path"": ""<HID::Gudsen R3 Racing Wheel and Pedals>/z"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Accelerate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0a4390e9-cfdb-48bd-98fe-ae7147ed22e5"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""942ce80d-dce8-403a-b110-79762698576f"",
                    ""path"": ""<HID::Gudsen R3 Racing Wheel and Pedals>/stick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""84552baa-ba65-4621-bb03-62fe215497f0"",
                    ""path"": ""<DualShockGamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Brake"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7f9b776a-b85b-4ca2-8e75-d9e092b5e672"",
                    ""path"": ""<HID::Gudsen R3 Racing Wheel and Pedals>/rz"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Brake"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bdf60f9c-4708-4b3c-80c1-728b989f86df"",
                    ""path"": ""<DualShockGamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""StartRace"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1015d36d-0621-4125-a336-b720d4eced40"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""StartRace"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c5d3aab8-1a04-48ed-9ac6-4eec642fdef5"",
                    ""path"": ""<DualShockGamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Reverse"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""93dfb26e-c25c-451c-bb2d-d1ad8b1596fb"",
                    ""path"": ""<DualShockGamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Reload"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2739fccb-fef5-44a7-94bf-bd214b8c1355"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Reload"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""95fc8535-2e71-4e7f-82c3-85a6145f8541"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Tes"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Moza R3"",
            ""id"": ""9eff7221-2afb-46f4-829d-d609c3872f68"",
            ""actions"": [
                {
                    ""name"": ""Accelerate"",
                    ""type"": ""Value"",
                    ""id"": ""ba1fcfe4-f2f1-4904-8b27-0a2fb5a93b2d"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""23cdeb8d-d665-4a92-a6b1-df78da7f320c"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Brake"",
                    ""type"": ""Value"",
                    ""id"": ""ab82a9d6-a11c-4029-a4f5-9c204d499ca2"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""StartRace"",
                    ""type"": ""Button"",
                    ""id"": ""e7dfc6b1-278b-4848-ac63-d37b7ea91189"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""816c7ad1-6e6c-42d9-ac7c-d81be363bc77"",
                    ""path"": ""<HID::Gudsen R3 Racing Wheel and Pedals>/z"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Accelerate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c34e244e-d2c1-48dc-8ac4-a9ec6bd75e9d"",
                    ""path"": ""<HID::Gudsen R3 Racing Wheel and Pedals>/stick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4e4730ea-77b0-4ec6-adcb-68fdd44affde"",
                    ""path"": ""<HID::Gudsen R3 Racing Wheel and Pedals>/rz"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Brake"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0fb1a2a9-3178-44e1-93d2-bea14255c458"",
                    ""path"": ""<Keyboard>/t"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""StartRace"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // PlayerStik
        m_PlayerStik = asset.FindActionMap("PlayerStik", throwIfNotFound: true);
        m_PlayerStik_Accelerate = m_PlayerStik.FindAction("Accelerate", throwIfNotFound: true);
        m_PlayerStik_Move = m_PlayerStik.FindAction("Move", throwIfNotFound: true);
        m_PlayerStik_Brake = m_PlayerStik.FindAction("Brake", throwIfNotFound: true);
        m_PlayerStik_StartRace = m_PlayerStik.FindAction("StartRace", throwIfNotFound: true);
        m_PlayerStik_Reverse = m_PlayerStik.FindAction("Reverse", throwIfNotFound: true);
        m_PlayerStik_Reload = m_PlayerStik.FindAction("Reload", throwIfNotFound: true);
        m_PlayerStik_Tes = m_PlayerStik.FindAction("Tes", throwIfNotFound: true);
        // Moza R3
        m_MozaR3 = asset.FindActionMap("Moza R3", throwIfNotFound: true);
        m_MozaR3_Accelerate = m_MozaR3.FindAction("Accelerate", throwIfNotFound: true);
        m_MozaR3_Move = m_MozaR3.FindAction("Move", throwIfNotFound: true);
        m_MozaR3_Brake = m_MozaR3.FindAction("Brake", throwIfNotFound: true);
        m_MozaR3_StartRace = m_MozaR3.FindAction("StartRace", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerStik
    private readonly InputActionMap m_PlayerStik;
    private List<IPlayerStikActions> m_PlayerStikActionsCallbackInterfaces = new List<IPlayerStikActions>();
    private readonly InputAction m_PlayerStik_Accelerate;
    private readonly InputAction m_PlayerStik_Move;
    private readonly InputAction m_PlayerStik_Brake;
    private readonly InputAction m_PlayerStik_StartRace;
    private readonly InputAction m_PlayerStik_Reverse;
    private readonly InputAction m_PlayerStik_Reload;
    private readonly InputAction m_PlayerStik_Tes;
    public struct PlayerStikActions
    {
        private @StikInput m_Wrapper;
        public PlayerStikActions(@StikInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Accelerate => m_Wrapper.m_PlayerStik_Accelerate;
        public InputAction @Move => m_Wrapper.m_PlayerStik_Move;
        public InputAction @Brake => m_Wrapper.m_PlayerStik_Brake;
        public InputAction @StartRace => m_Wrapper.m_PlayerStik_StartRace;
        public InputAction @Reverse => m_Wrapper.m_PlayerStik_Reverse;
        public InputAction @Reload => m_Wrapper.m_PlayerStik_Reload;
        public InputAction @Tes => m_Wrapper.m_PlayerStik_Tes;
        public InputActionMap Get() { return m_Wrapper.m_PlayerStik; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerStikActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerStikActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerStikActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerStikActionsCallbackInterfaces.Add(instance);
            @Accelerate.started += instance.OnAccelerate;
            @Accelerate.performed += instance.OnAccelerate;
            @Accelerate.canceled += instance.OnAccelerate;
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Brake.started += instance.OnBrake;
            @Brake.performed += instance.OnBrake;
            @Brake.canceled += instance.OnBrake;
            @StartRace.started += instance.OnStartRace;
            @StartRace.performed += instance.OnStartRace;
            @StartRace.canceled += instance.OnStartRace;
            @Reverse.started += instance.OnReverse;
            @Reverse.performed += instance.OnReverse;
            @Reverse.canceled += instance.OnReverse;
            @Reload.started += instance.OnReload;
            @Reload.performed += instance.OnReload;
            @Reload.canceled += instance.OnReload;
            @Tes.started += instance.OnTes;
            @Tes.performed += instance.OnTes;
            @Tes.canceled += instance.OnTes;
        }

        private void UnregisterCallbacks(IPlayerStikActions instance)
        {
            @Accelerate.started -= instance.OnAccelerate;
            @Accelerate.performed -= instance.OnAccelerate;
            @Accelerate.canceled -= instance.OnAccelerate;
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Brake.started -= instance.OnBrake;
            @Brake.performed -= instance.OnBrake;
            @Brake.canceled -= instance.OnBrake;
            @StartRace.started -= instance.OnStartRace;
            @StartRace.performed -= instance.OnStartRace;
            @StartRace.canceled -= instance.OnStartRace;
            @Reverse.started -= instance.OnReverse;
            @Reverse.performed -= instance.OnReverse;
            @Reverse.canceled -= instance.OnReverse;
            @Reload.started -= instance.OnReload;
            @Reload.performed -= instance.OnReload;
            @Reload.canceled -= instance.OnReload;
            @Tes.started -= instance.OnTes;
            @Tes.performed -= instance.OnTes;
            @Tes.canceled -= instance.OnTes;
        }

        public void RemoveCallbacks(IPlayerStikActions instance)
        {
            if (m_Wrapper.m_PlayerStikActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerStikActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerStikActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerStikActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerStikActions @PlayerStik => new PlayerStikActions(this);

    // Moza R3
    private readonly InputActionMap m_MozaR3;
    private List<IMozaR3Actions> m_MozaR3ActionsCallbackInterfaces = new List<IMozaR3Actions>();
    private readonly InputAction m_MozaR3_Accelerate;
    private readonly InputAction m_MozaR3_Move;
    private readonly InputAction m_MozaR3_Brake;
    private readonly InputAction m_MozaR3_StartRace;
    public struct MozaR3Actions
    {
        private @StikInput m_Wrapper;
        public MozaR3Actions(@StikInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Accelerate => m_Wrapper.m_MozaR3_Accelerate;
        public InputAction @Move => m_Wrapper.m_MozaR3_Move;
        public InputAction @Brake => m_Wrapper.m_MozaR3_Brake;
        public InputAction @StartRace => m_Wrapper.m_MozaR3_StartRace;
        public InputActionMap Get() { return m_Wrapper.m_MozaR3; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MozaR3Actions set) { return set.Get(); }
        public void AddCallbacks(IMozaR3Actions instance)
        {
            if (instance == null || m_Wrapper.m_MozaR3ActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MozaR3ActionsCallbackInterfaces.Add(instance);
            @Accelerate.started += instance.OnAccelerate;
            @Accelerate.performed += instance.OnAccelerate;
            @Accelerate.canceled += instance.OnAccelerate;
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Brake.started += instance.OnBrake;
            @Brake.performed += instance.OnBrake;
            @Brake.canceled += instance.OnBrake;
            @StartRace.started += instance.OnStartRace;
            @StartRace.performed += instance.OnStartRace;
            @StartRace.canceled += instance.OnStartRace;
        }

        private void UnregisterCallbacks(IMozaR3Actions instance)
        {
            @Accelerate.started -= instance.OnAccelerate;
            @Accelerate.performed -= instance.OnAccelerate;
            @Accelerate.canceled -= instance.OnAccelerate;
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Brake.started -= instance.OnBrake;
            @Brake.performed -= instance.OnBrake;
            @Brake.canceled -= instance.OnBrake;
            @StartRace.started -= instance.OnStartRace;
            @StartRace.performed -= instance.OnStartRace;
            @StartRace.canceled -= instance.OnStartRace;
        }

        public void RemoveCallbacks(IMozaR3Actions instance)
        {
            if (m_Wrapper.m_MozaR3ActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMozaR3Actions instance)
        {
            foreach (var item in m_Wrapper.m_MozaR3ActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MozaR3ActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MozaR3Actions @MozaR3 => new MozaR3Actions(this);
    public interface IPlayerStikActions
    {
        void OnAccelerate(InputAction.CallbackContext context);
        void OnMove(InputAction.CallbackContext context);
        void OnBrake(InputAction.CallbackContext context);
        void OnStartRace(InputAction.CallbackContext context);
        void OnReverse(InputAction.CallbackContext context);
        void OnReload(InputAction.CallbackContext context);
        void OnTes(InputAction.CallbackContext context);
    }
    public interface IMozaR3Actions
    {
        void OnAccelerate(InputAction.CallbackContext context);
        void OnMove(InputAction.CallbackContext context);
        void OnBrake(InputAction.CallbackContext context);
        void OnStartRace(InputAction.CallbackContext context);
    }
}
